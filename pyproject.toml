[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aiopixooapi"
version = "0.1.0"
description = "Asynchronous Python library for Divoom Pixoo64 LED display"
readme = "README.md"
requires-python = ">=3.8"
license = "AGPL-3.0"
authors = [
    { name = "Koen Dierckx", email = "koen.dierckx@gmail.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Programming Language :: Python :: 3",
]
dependencies = [
    "aiohttp>=3.9.0",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-asyncio",
    "aioresponses",
    "flake8",
    "ruff",
]

[project.urls]
Homepage = "https://github.com/KoenDierckx/aiopixooapi"
Documentation = "https://github.com/KoenDierckx/aiopixooapi#readme"
Repository = "https://github.com/KoenDierckx/aiopixooapi.git"
Issues = "https://github.com/KoenDierckx/aiopixooapi/issues"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
## Exclude a variety of commonly ignored directories.
#exclude = [
#    ".bzr",
#    ".direnv",
#    ".eggs",
#    ".git",
#    ".git-rewrite",
#    ".hg",
#    ".ipynb_checkpoints",
#    ".mypy_cache",
#    ".nox",
#    ".pants.d",
#    ".pyenv",
#    ".pytest_cache",
#    ".pytype",
#    ".ruff_cache",
#    ".svn",
#    ".tox",
#    ".venv",
#    ".vscode",
#    "__pypackages__",
#    "_build",
#    "buck-out",
#    "build",
#    "dist",
#    "node_modules",
#    "site-packages",
#    "venv",
#]

# Same as Black.
line-length = 120
#indent-width = 4

# Assume Python 3.9
#target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["ALL"]
ignore = [
    "ANN201", # Missing type annotation for function argument
    "ANN202", # Missing return type annotation
    "ANN204", # Missing type annotation for `self` or `cls`
    "EM101",  # Unused exception in `except` block
    "EM102",  # Bare `except` detected
    "FA100",  # Avoid using `assert` statements
    "G004",   # Unused loop variable
    "I001",   # Import outside of top-level
    "INP001", # Input function detected
    "PLR0913",# Unnecessary `else` after `return`
    "PLR2004",# Unnecessary `pass` statement
    "RET504", # Unnecessary `return` statement
    "RUF013", # Unused variable in comprehension
    "RUF022", # Unused variable in loop
    "S101",   # Use of `assert` detected
    "TRY003", # `try` block with no `except` or `finally`
    "TRY301", # `try` block with no `except` or `else`
    "TRY400", # Raise statement inside `finally` block
]

# Allow fix for all enabled rules (when `--fix`) is provided.
#fixable = ["ALL"]
#unfixable = []

## Allow unused variables when underscore-prefixed.
#dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
#
#[tool.ruff.format]
## Like Black, use double quotes for strings.
#quote-style = "double"
#
## Like Black, indent with spaces, rather than tabs.
#indent-style = "space"
#
## Like Black, respect magic trailing commas.
#skip-magic-trailing-comma = false
#
## Like Black, automatically detect the appropriate line ending.
#line-ending = "auto"
#
## Enable auto-formatting of code examples in docstrings. Markdown,
## reStructuredText code/literal blocks and doctests are all supported.
##
## This is currently disabled by default, but it is planned for this
## to be opt-out in the future.
#docstring-code-format = false
#
## Set the line length limit used when formatting code snippets in
## docstrings.
##
## This only has an effect when the `docstring-code-format` setting is
## enabled.
#docstring-code-line-length = "dynamic"
